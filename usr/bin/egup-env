#!/usr/bin/env bash
# set -x

egup-env-catch() {
    set +e
    while true; do
        read -rsn1 char < "$1"
        if [[ "$char" == $'\cd' ]]; then
            declare -f egup-exit > "$1"
        fi
    done
}

egup-env() {
    if [[ -f .egup.useOverrides ]]; then
        if [[ -f .egup.environment ]]; then
            egup-exit
        fi

        egupDir="$(pwd)"

        egupWorktreebak="$GIT_WORK_TREE"

        egupGitdirbak="$GIT_DIR"

        egupGitdir=".git"

        if [[ -f .egup.gitdir ]]; then
            egupGitdir="$(<.egup.gitdir)"
            egupGitdir="$(readlink -f "$egupGitdir")"
            echo "Using custom gitdir: $egupGitdir"
            GIT_DIR="$egupGitdir"
            export GIT_DIR
        fi

        if [[ -f .egup.worktree ]]; then
            worktree="$(<.egup.worktree)"
            worktree="$(readlink -f "$worktree")"
            echo "Using custom worktree: $worktree"
            GIT_WORK_TREE="$worktree"
            export GIT_WORK_TREE
            cd "$worktree" || exit 1
        fi

        touch .egup.environment
        
        local pwdPath="$(readlink -f "$(pwd)")"
        local egupDirPath="$(readlink -f "$egupDir")"

        if [[ "$pwdPath" == "$egupDirPath" ]]; then
            noMoveOverrides="true"
        fi

        if [[ -f "$egupDir/.egup.nopush" ]]; then
            echo "Applying .egup.nopush override"
            if [[ "$noMoveOverrides" != "true" ]]; then
                mv -v .egup.nopush .egup.nopush.bak || echo "(no .egup.nopush found so not moving)"
            fi
            cp -p "$egupDir/.egup.nopush" .egup.nopush
        fi

        if [[ -f "$egupDir/.egup.gitattributes" ]]; then
            echo "Applying .gitattributes override"
            if [[ "$noMoveOverrides" != "true" ]]; then
                mv -v .gitattributes .egup.gitattributes.bak || echo "(no .gitattributes found so not moving)"
            fi
            cp -p "$egupDir/.egup.gitattributes" .gitattributes
        fi

        if [[ -f "$egupDir/.egup.gitignore" ]]; then
            echo "Applying .gitignore override"
            if [[ "$noMoveOverrides" != "true" ]]; then
                mv -v .gitignore .egup.gitignore.bak || echo "(no .gitignore found so not moving)"
            fi
            cp -p "$egupDir/.egup.gitignore" .gitignore
        fi

        if [[ -f "$egupDir/.egup.gitmodules" ]]; then
            echo "Applying .gitmodules override"
            if [[ "$noMoveOverrides" != "true" ]]; then
                mv -v .gitmodules .egup.gitmodules.bak || echo "(no .gitmodules found so not moving)"
            fi
            cp -p "$egupDir/.egup.gitmodules" .gitmodules
        fi

        if [[ -f "$egupDir/.egup.tags" ]]; then
            echo "Applying .egup.tags override"
            if [[ "$noMoveOverrides" != "true" ]]; then
                mv -v .egup.tags .egup.tags.bak || echo "(no .egup.tags found so not moving)"
            fi
            cp -p "$egupDir/.egup.tags" .egup.tags
        fi

        if [[ -f "$egupDir/.egup.readme" ]]; then
            echo "Applying README.md override in $(pwd)"
                if [[ "$noMoveOverrides" != "true" ]]; then
                mv -v README.md .egup.readme.bak || echo "(no README.md found so not moving)"
            fi
            cp -p "$egupDir/.egup.readme" README.md
        fi

        egupEnvPsbak="$PS1"
        PS1="\[\033]0;\u@\h:\w\007\]\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \[\033[1;31m\](egup-env)\[\033[00m\]\[\033[01;34m\] $\[\033[00m\] "
        # stty eof ^S
        # egup-env-catch "$(tty)" &
    fi
}

egup-exit() {
    [[ -n "$egupDir" ]] || egupDir="."
    if [[ -f "${egupDir:?}/.egup.useOverrides" ]]; then
        if [[ "$(readlink -f "$(pwd)")" != "$(readlink -f "$egupDir")" ]]; then
            if [[ -f .egup.nopush ]]; then
                if [[ -f "$egupDir/.egup.nopush" ]]; then
                    mv -vf .egup.nopush "$egupDir/.egup.nopush"
                fi
            fi
            if [[ -f .egup.nopush.bak ]]; then
                echo "Restoring .egup.nopush"
                mv -v .egup.nopush.bak .egup.nopush
            fi

            if [[ -f .gitattributes ]]; then
                if [[ -f "$egupDir/.egup.gitattributes" ]]; then
                    mv -vf .gitattributes "$egupDir/.egup.gitattributes"
                fi
            fi
            if [[ -f .egup.gitattributes.bak ]]; then
                echo "Restoring overridden .gitattributes"
                mv -v .egup.gitattributes.bak .gitattributes
            fi

            if [[ -f .gitignore ]]; then
                if [[ -f "$egupDir/.egup.gitignore" ]]; then
                    mv -vf .gitignore "$egupDir/.egup.gitignore"
                fi
            fi
            if [[ -f .egup.gitignore.bak ]]; then
                echo "Restoring overridden .gitignore"
                mv -v .egup.gitignore.bak .gitignore
            fi

            if [[ -f .gitmodules ]]; then
                if [[ -f "$egupDir/.egup.gitmodules" ]]; then
                    mv -vf .gitmodules "$egupDir/.egup.gitmodules"
                fi
            fi
            if [[ -f .egup.gitmodules.bak ]]; then
                echo "Restoring overridden .gitmodules"
                mv -v .egup.gitmodules.bak .gitmodules
            fi

            if [[ -f README.md ]]; then
                if [[ -f "$egupDir/.egup.readme" ]]; then
                    mv -vf README.md "$egupDir/.egup.readme"
                fi
            fi
            if [[ -f .egup.readme.bak ]]; then
                echo "Restoring overridden README.md"
                mv -v .egup.readme.bak README.md
            fi

            if [[ -f .egup.tags ]]; then
                if [[ -f "$egupDir/.egup.tags" ]]; then
                    mv -vf .egup.tags "$egupDir/.egup.tags"
                fi
            fi
            if [[ -f .egup.tags.bak ]]; then
                echo "Restoring overridden .egup.tags"
                mv -v .egup.tags.bak .egup.tags
            fi
        fi
        GIT_WORK_TREE="$worktreebak"
        export GIT_WORK_TREE
        GIT_DIR="$gitdirbak"
        export GIT_DIR
        PS1="$egupEnvPsbak"
        rm .egup.environment
        cd "$egupDir" || exit 1
        # stty eof ^D
    fi
}
export -f egup-exit

elen() {
    # set -x
    libraryDir="ember-library-2"
    if [[ -n "$1" ]]; then
        libraryDir="$1"
    fi
    originalDir="$(pwd)"
    cd "$(crystallize-getconf EmberLibrary)"/Ember/ember-library/"$libraryDir"/ || exit 1
        egup-env
    }

elex() {
        egup-exit
        cd "$originalDir"
}
