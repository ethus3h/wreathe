Object.defineProperty(exports, '__esModule', {
  value: true
});

/* eslint-disable import/extensions, import/no-extraneous-dependencies */

var _atom = require('atom');

/* eslint-enable import/extensions, import/no-extraneous-dependencies */

'use babel';var helpers = null;
var path = null;

exports['default'] = {
  activate: function activate() {
    var _this = this;

    require('atom-package-deps').install('linter-csslint');

    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.config.observe('linter-csslint.disableTimeout', function (value) {
      _this.disableTimeout = value;
    }));
  },

  deactivate: function deactivate() {
    this.subscriptions.dispose();
  },

  provideLinter: function provideLinter() {
    return {
      name: 'CSSLint',
      grammarScopes: ['source.css', 'source.html'],
      scope: 'file',
      lintOnFly: true,
      lint: function lint(textEditor) {
        if (!helpers) {
          helpers = require('atom-linter');
        }
        if (!path) {
          path = require('path');
        }
        var filePath = textEditor.getPath();
        var text = textEditor.getText();
        if (text.length === 0) {
          return Promise.resolve([]);
        }
        var parameters = ['--format=json', '-'];
        var exec = path.join(__dirname, '..', 'node_modules', 'atomlinter-csslint', 'cli.js');
        var projectPath = atom.project.relativizePath(filePath)[0];
        var cwd = projectPath;
        if (!cwd) {
          cwd = path.dirname(filePath);
        }
        var options = { stdin: text, cwd: cwd };
        if (this.disableTimeout) {
          options.timeout = Infinity;
        }
        return helpers.execNode(exec, parameters, options).then(function (output) {
          if (textEditor.getText() !== text) {
            // The editor contents have changed, tell Linter not to update
            return null;
          }

          var toReturn = [];
          if (output.length < 1) {
            // No output, no errors
            return toReturn;
          }

          var lintResult = JSON.parse(output);

          if (lintResult.messages.length < 1) {
            // Output, but no errors found
            return toReturn;
          }

          lintResult.messages.forEach(function (data) {
            var line = undefined;
            var col = undefined;
            if (!(data.line && data.col)) {
              line = 0;

              // Use the file start if a location wasn't defined
              col = 0;
            } else {
              line = data.line - 1;
              col = data.col - 1;
            }

            var msg = {
              type: data.type.charAt(0).toUpperCase() + data.type.slice(1),
              text: data.message,
              filePath: filePath,
              range: helpers.rangeFromLineNumber(textEditor, line, col)
            };

            if (data.rule.id && data.rule.desc) {
              msg.trace = [{
                type: 'Trace',
                text: '[' + data.rule.id + '] ' + data.rule.desc
              }];
            }
            toReturn.push(msg);
          });
          return toReturn;
        });
      }
    };
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,