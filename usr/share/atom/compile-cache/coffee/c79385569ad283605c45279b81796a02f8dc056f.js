(function() {
  var CompositeDisposable, ZipFolderView;

  ZipFolderView = require('./zip-folder-view');

  CompositeDisposable = require('atom').CompositeDisposable;

  module.exports = {
    config: {
      compressionLevel: {
        type: 'integer',
        "default": 6,
        description: 'Valid values are 0 (off) - 9 (maximum compression), any other values will result in compression being disabled.'
      }
    },
    modalPanel: null,
    zipFolderView: null,
    subscriptions: null,
    activate: function(state) {
      this.zipFolderView = new ZipFolderView(state.zipFolderViewState);
      this.modalPanel = atom.workspace.addModalPanel({
        item: this.zipFolderView.getElement(),
        visible: false
      });
      this.subscriptions = new CompositeDisposable;
      return this.subscriptions.add(atom.commands.add('atom-workspace', {
        'zip-folder:run': (function(_this) {
          return function() {
            return _this.run();
          };
        })(this)
      }));
    },
    deactivate: function() {
      this.modalPanel.destroy();
      this.subscriptions.dispose();
      return this.zipFolderView.destroy();
    },
    serialize: function() {
      return {
        zipFolderViewState: this.zipFolderView.serialize()
      };
    },
    run: function() {
      var JSZip, absPath, basePaths, basePathsChecked, compressionLevel, content, d, fileCount, files, fs, listTree, name, path, pieces, relPath, savePath, selPath, selected, selectedBasePath, targetPath, zip;
      fs = require('fs-plus');
      JSZip = require("jszip");
      path = require('path');
      zip = new JSZip();
      basePaths = atom.project.getPaths();
      listTree = document.querySelector('.tree-view');
      selected = listTree.querySelectorAll('.selected > .header > span, .selected > span');
      if (selected.length > 1) {
        pieces = basePaths[0].split(path.sep);
        name = pieces[pieces.length - 1].replace(".", "-");
        savePath = basePaths[0] + path.sep + name + ".zip";
        selectedBasePath = "";
      } else {
        pieces = selected[0].dataset.path.split(path.sep);
        name = pieces[pieces.length - 1].replace(".", "-");
        pieces.splice(pieces.length - 1, 1);
        targetPath = pieces.join(path.sep);
        savePath = targetPath + path.sep + name + ".zip";
        selectedBasePath = "";
        if (fs.isDirectorySync(selected[0].dataset.path)) {
          selectedBasePath = selected[0].dataset.path;
        }
      }
      if (fs.existsSync(savePath)) {
        fs.truncateSync(savePath, 0);
      }
      d = 0;
      while (d < selected.length) {
        selPath = selected[d].dataset.path;
        relPath = "";
        files = [];
        if (fs.isDirectorySync(selPath)) {
          files = fs.listTreeSync(selPath);
        } else {
          files = [selPath];
        }
        fileCount = 0;
        while (fileCount < files.length) {
          absPath = files[fileCount];
          if (selectedBasePath !== "") {
            relPath = absPath.replace(selectedBasePath + path.sep, "", 'i');
          } else {
            basePathsChecked = 0;
            while (basePathsChecked < basePaths.length) {
              relPath = absPath.replace(basePaths[basePathsChecked] + path.sep, "", 'i');
              basePathsChecked++;
            }
          }
          if (!fs.isDirectorySync(absPath)) {
            zip.file(relPath, fs.readFileSync(absPath), {
              createFolders: true
            });
          }
          fileCount++;
        }
        d++;
      }
      compressionLevel = atom.config.get('zip-folder.compressionLevel');
      if (compressionLevel === parseInt(compressionLevel, 10) && compressionLevel > 0 && compressionLevel < 10) {
        content = zip.generate({
          type: "nodebuffer",
          compression: "DEFLATE",
          compressionOptions: {
            level: compressionLevel
          }
        });
      } else {
        content = zip.generate({
          type: "nodebuffer"
        });
      }
      return fs.writeFile(savePath, content, function(e) {
        if (e !== null) {
          return atom.notifications.addError(e.message);
        } else {
          return atom.notifications.addSuccess("Zip complete");
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
