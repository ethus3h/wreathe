diff --git a/metadata/neg.xml.in b/metadata/neg.xml.in
index fa7e9ed..669b1eb 100644
--- a/metadata/neg.xml.in
+++ b/metadata/neg.xml.in
@@ -17,21 +17,46 @@
 			</option>
 			<option name="screen_toggle_key" type="key">
 				<_short>Toggle Screen Negative</_short>
-				<_long>Toggle screen negative</_long>
+				<_long>Toggle all windows negative, except for windows in the &quot;Screen Exclusions&quot; list</_long>
 				<default>&lt;Super&gt;m</default>
 			</option>
+			<option name="matched_toggle_key" type="key">
+				<_short>Toggle Matched Windows Negative</_short>
+				<_long>Toggles the windows negative matched by the &quot;Matched Windows&quot; list</_long>
+				<default></default>
+			</option>
 		</display>
 		<screen>
 			<option name="toggle_by_default" type="bool">
 				<_short>Auto-Toggle Matched Windows</_short>
-				<_long>Automatically toggle windows in the match list by default</_long>
+				<_long>Automatically toggle windows in the &quot;Matched Windows&quot; list by default</_long>
 				<default>false</default>
 			</option>
 			<option name="neg_match" type="match">
-				<_short>Negative Windows</_short>
-				<_long>Windows to affect when negating</_long>
+				<_short>Matched Windows</_short>
+				<_long>Windows to affect when using the &quot;Toggle Matched Windows Negative&quot; keybinding or &quot;Auto-Toggle Matched Windows&quot;</_long>
 				<default>!(type=Desktop)</default>
 			</option>
+			<option name="toggle_screen_by_default" type="bool">
+				<_short>Auto-Toggle Screen</_short>
+				<_long>Automatically toggle all windows by default, except for those in the &quot;Screen Exclusions&quot; list</_long>
+				<default>false</default>
+			</option>
+			<option name="exclude_match" type="match">
+				<_short>Screen Exclusions</_short>
+				<_long>Windows to exclude when toggling the screen.</_long>
+				<default>type=Desktop | type=Dock</default>
+			</option>
+			<option name="preserve_toggled" type="bool">
+				<_short>Preserve Toggled Windows</_short>
+				<_long>When windows have been toggled using the &quot;Toggle Windows Negative&quot; keybinding, preserve their state when toggling the screen. Note that toggled windows' state will not be preserved between Compiz restarts. To use this option, disable &quot;Auto-Clear Toggled Window State&quot;.</_long>
+				<default>false</default>
+			</option>
+			<option name="clear_toggled" type="bool">
+				<_short>Auto-Clear Toggled Window State</_short>
+				<_long>A window that has been toggled using the &quot;Toggle Windows Negative&quot; keybinding will have its state discarded when toggling a match group that includes that window. This will clear window states even if &quot;Preserve Toggled Windows&quot; is selected.</_long>
+				<default>true</default>
+			</option>
 		</screen>
 	</plugin>
 </compiz>
diff --git a/src/neg/neg.c b/src/neg/neg.c
index 1ed10c0..54c62d8 100644
--- a/src/neg/neg.c
+++ b/src/neg/neg.c
@@ -46,7 +46,14 @@ typedef struct _NEGScreen
 
     DrawWindowTextureProc drawWindowTexture;
 
-    Bool isNeg; /* negative screen flag */
+    Bool isNeg; /* negative screen flag: controlled by "Auto-Toggle Screen"
+                   checkbox */
+    Bool keyNegToggled; /* screen is toggled using the "Toggle Screen Negative"
+                           keybinding */
+    Bool matchNeg; /* match group is toggled: controlled by "Auto-Toggle
+                      Matched Windows" checkbox */
+    Bool keyMatchToggled; /* match group is toggled using the "Toggle Matched
+                             Windows Negative" keybinding */
 
     int negFunction;
     int negAlphaFunction;
@@ -54,8 +61,15 @@ typedef struct _NEGScreen
 
 typedef struct _NEGWindow
 {
-    Bool isNeg; /* negative window flag */
-    Bool matched;
+    Bool isNeg; /* negative window flag: controlled by NEGUpdateState function */
+    Bool keyNegToggled; /* window has been individually toggled using the
+                           "Toggle Window Negative" keybinding (will be unset
+                           when Preserve Toggled Windows means the window
+                           should be using its previous state) */
+    Bool keyNegPreserved; /* window has been individually toggled using the
+                             "Toggle Window Negative" keybinding. This preserves
+                             the window state between screen toggles for Preserve
+                             Toggled Windows. */
 } NEGWindow;
 
 #define GET_NEG_CORE(c) \
@@ -81,32 +95,161 @@ typedef struct _NEGWindow
 static void
 NEGUpdateState (CompWindow *w)
 {
+    NEG_SCREEN (w->screen);
     NEG_WINDOW (w);
 
-    /* check include list */
-    if (matchEval (negGetNegMatch (w->screen), w))
-		nw->isNeg = !nw->isNeg;
-	else
-		nw->isNeg = FALSE;
+    Bool windowState;
+
+    /* Decide whether the given window should be negative or not, depending on
+       the various parameters that can affect this, and set windowState thus */
+
+    windowState = FALSE;
+
+    /* Whole screen toggle state */
+    if (! matchEval (negGetExcludeMatch (w->screen), w)) {
+	if (ns->isNeg)
+	    windowState = !windowState;
+	if (ns->keyNegToggled)
+	    windowState = !windowState;
+    }
+
+    /* Matched set toggle state */
+    if (matchEval (negGetNegMatch (w->screen), w)) {
+	if (ns->matchNeg)
+	    windowState = !windowState;
+	if (ns->keyMatchToggled)
+	    windowState = !windowState;
+    }
+
+    /* Individual window state */
+    if (nw->keyNegToggled)
+	windowState = !windowState;
+
+    /* Now that we know what this window's state should be, push the value to
+       its nw->isNeg. */
+    nw->isNeg = windowState;
 
     /* cause repainting */
     addWindowDamage (w);
 }
 
+static void
+NEGUpdateScreen (CompScreen *s)
+{
+    CompWindow *w;
+
+    /* update every window */
+    for (w = s->windows; w; w = w->next)
+	NEGUpdateState (w);
+}
+
+static void
+NEGWindowUpdateKeyToggle (CompWindow *w)
+{
+    /* This function updates the window-toggled state bools for a given window
+       if needed for the Preserve Toggled Windows option. */
+
+    NEG_WINDOW (w);
+
+    if (!negGetPreserveToggled (w->screen))
+	return;
+
+    if (nw->keyNegToggled)
+	nw->keyNegToggled = FALSE;
+    else if (nw->keyNegPreserved)
+	nw->keyNegToggled = TRUE;
+}
+
+static void
+NEGToggleWindow (CompWindow *w)
+{
+    NEG_WINDOW (w);
+
+    nw->keyNegToggled = !nw->keyNegToggled;
+    nw->keyNegPreserved = !nw->keyNegPreserved;
+
+    /* cause repainting */
+    NEGUpdateState (w);
+}
+
+static void
+NEGScreenClearToggled (CompScreen *s)
+{
+    /* This function clears toggled window state for windows in the Screen set
+       (not matched by Screen Exclusions) if the Auto-Clear config option is
+       set. */
+
+    CompWindow *w;
+
+    if (!negGetClearToggled (s))
+	return;
+
+    for (w = s->windows; w; w = w->next)
+    {
+	if (! matchEval (negGetExcludeMatch (w->screen), w)) {
+	    NEG_WINDOW (w);
+	    nw->keyNegToggled = FALSE;
+	    nw->keyNegPreserved = FALSE;
+	}
+    }
+}
+
 static void
 NEGToggleScreen (CompScreen *s)
 {
+    NEG_SCREEN (s);
     CompWindow *w;
 
-    NEG_SCREEN(s);
+    /* update toggle state for relevant windows */
+    for (w = s->windows; w; w = w->next)
+	if (negGetPreserveToggled (s) && ! matchEval (negGetExcludeMatch (s), w))
+	    NEGWindowUpdateKeyToggle (w);
+
+    /* Clear toggled window state if the Auto-Clear config option is set */
+    NEGScreenClearToggled(s);
 
     /* toggle screen negative flag */
-    ns->isNeg = !ns->isNeg;
+    ns->keyNegToggled = !ns->keyNegToggled;
+
+    NEGUpdateScreen (s);
+}
+
+static void
+NEGMatchClearToggled (CompScreen *s)
+{
+    CompWindow *w;
+
+    if (!negGetClearToggled (s))
+	return;
 
-    /* toggle every window */
     for (w = s->windows; w; w = w->next)
-	if (w)
-	    NEGUpdateState (w);
+    {
+	if (matchEval (negGetNegMatch (w->screen), w)) {
+	    NEG_WINDOW (w);
+	    nw->keyNegToggled = FALSE;
+	    nw->keyNegPreserved = FALSE;
+	}
+    }
+}
+
+static void
+NEGToggleMatches (CompScreen *s)
+{
+    NEG_SCREEN (s);
+    CompWindow *w;
+
+    /* update toggle state for relevant windows */
+    for (w = s->windows; w; w = w->next)
+	if (negGetPreserveToggled (s) && matchEval (negGetNegMatch (s), w))
+	    NEGWindowUpdateKeyToggle (w);
+
+    /* Clear toggled window state if the Auto-Clear config option is set */
+    NEGMatchClearToggled(s);
+
+    /* toggle match negative flag */
+    ns->keyMatchToggled = !ns->keyMatchToggled;
+
+    NEGUpdateScreen (s);
 }
 
 static Bool
@@ -123,7 +266,7 @@ negToggle (CompDisplay     *d,
     w = findWindowAtDisplay (d, xid);
 
     if (w)
-	NEGUpdateState (w);
+	NEGToggleWindow (w);
 
     return TRUE;
 }
@@ -147,6 +290,25 @@ negToggleAll (CompDisplay     *d,
     return TRUE;
 }
 
+static Bool
+negToggleMatched (CompDisplay     *d,
+	      CompAction      *action,
+	      CompActionState state,
+	      CompOption      *option,
+	      int             nOption)
+{
+    CompScreen *s;
+    Window     xid;
+
+    xid = getIntOptionNamed (option, nOption, "root", 0);
+    s = findScreenAtDisplay (d, xid);
+
+    if (s)
+	NEGToggleMatches (s);
+
+    return TRUE;
+}
+
 static int
 getNegFragmentFunction (CompScreen  *s,
 			CompTexture *texture,
@@ -310,20 +472,20 @@ NEGDrawWindowTexture (CompWindow           *w,
 		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_PREVIOUS);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
 
-    		    constant[0] = 0.5f + 0.5f * RED_SATURATION_WEIGHT;
+		    constant[0] = 0.5f + 0.5f * RED_SATURATION_WEIGHT;
 		    constant[1] = 0.5f + 0.5f * GREEN_SATURATION_WEIGHT;
 		    constant[2] = 0.5f + 0.5f * BLUE_SATURATION_WEIGHT;
 		    constant[3] = 1.0;
 
 		    glTexEnvfv (GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, constant);
 
-    		    /* mark another texture active */
+		    /* mark another texture active */
 		    (*w->screen->activeTexture) (GL_TEXTURE2_ARB);
 
 		    /* enable that texture */
-    		    enableTexture (w->screen, texture, filter);
+		    enableTexture (w->screen, texture, filter);
 
-	    	    glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
+		    glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_INTERPOLATE);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_TEXTURE0);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_RGB, GL_PREVIOUS);
@@ -340,12 +502,12 @@ NEGDrawWindowTexture (CompWindow           *w,
 		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_PREVIOUS);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
 
-    		    /* color constant */
+		    /* color constant */
 		    constant[3] = attrib->saturation / 65535.0f;
 
 		    glTexEnvfv (GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, constant);
 
-    		    /* if we are not opaque or not fully bright */
+		    /* if we are not opaque or not fully bright */
 		    if (attrib->opacity < OPAQUE ||
 			attrib->brightness != BRIGHT)
 		    {
@@ -410,7 +572,7 @@ NEGDrawWindowTexture (CompWindow           *w,
 		    /* disable the current texture */
 		    disableTexture (w->screen, texture);
 
-	    	    /* set the texture mode back to replace */
+		    /* set the texture mode back to replace */
 		    glTexEnvi (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
 
 		    /* re-activate last texture */
@@ -421,12 +583,12 @@ NEGDrawWindowTexture (CompWindow           *w,
 		    /* fully saturated or fully unsaturated */
 
 		    glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_MODULATE);
-    		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_PREVIOUS);
+		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_PREVIOUS);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_ALPHA, GL_CONSTANT);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_ALPHA, GL_SRC_ALPHA);
 
-    		    /* color constant */
+		    /* color constant */
 		    constant[3] = attrib->opacity / 65535.0f;
 		    constant[0] = constant[1] = constant[2] =
 				  constant[3] * attrib->brightness / 65535.0f;
@@ -440,7 +602,7 @@ NEGDrawWindowTexture (CompWindow           *w,
 
 		    glTexEnvfv (GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, constant);
 
-    		    /* draw the window geometry */
+		    /* draw the window geometry */
 		    (*w->drawWindowGeometry) (w);
 		}
 
@@ -490,7 +652,7 @@ NEGDrawWindowTexture (CompWindow           *w,
 		    /* enable blending */
 		    glEnable (GL_BLEND);
 
-    		    /* color constant */
+		    /* color constant */
 		    constant[3] = attrib->opacity / 65535.0f;
 		    constant[0] = constant[3] * attrib->brightness / 65535.0f;
 		    constant[1] = constant[3] * attrib->brightness / 65535.0f;
@@ -514,7 +676,7 @@ NEGDrawWindowTexture (CompWindow           *w,
 		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
 		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_ALPHA, GL_SRC_ALPHA);
 
-    		    /* draw the window geometry */
+		    /* draw the window geometry */
 		    (*w->drawWindowGeometry) (w);
 
 		    /* disable blending */
@@ -549,15 +711,8 @@ static void
 NEGWindowAdd (CompScreen *s,
 	      CompWindow *w)
 {
-	NEG_SCREEN (s);
-	NEG_WINDOW (w);
-
-	nw->matched = matchEval (negGetNegMatch (s), w);
-
-	/* nw->isNeg is initialized to FALSE in InitWindow, so we only
-	have to toggle it to TRUE if necessary */
-	if (ns->isNeg && nw->matched)
-		NEGUpdateState (w);
+	/* Run matching logic on the new window */
+	NEGUpdateState (w);
 }
 
 static void
@@ -568,48 +723,42 @@ NEGScreenOptionChanged (CompScreen       *s,
     switch (num)
     {
     case NegScreenOptionToggleByDefault:
-    {
-		CompWindow *w;
+	{
+	    NEG_SCREEN (s);
 
-		NEG_SCREEN (s);
+	    /* Clear toggled window state if the Auto-Clear config option is set */
+	    NEGMatchClearToggled(s);
 
-		ns->isNeg = opt[NegScreenOptionToggleByDefault].value.b;
+	    ns->matchNeg = negGetToggleByDefault (s);
 
-		for (w = s->windows; w; w = w->next)
-		{
-			NEG_WINDOW (w);
-			if (ns->isNeg)
-			{
-				if (!nw->isNeg)
-					NEGUpdateState (w);
-			}
-			else
-			{
-				if (nw->isNeg)
-					NEGUpdateState (w);
-			}
-		}
+	    NEGUpdateScreen (s);
 	}
-    break;
+	break;
     case NegScreenOptionNegMatch:
 	{
-	    CompWindow *w;
+	    NEGUpdateScreen (s);
+	}
+	break;
+    case NegScreenOptionToggleScreenByDefault:
+	{
 	    NEG_SCREEN (s);
 
-	    for (w = s->windows; w; w = w->next)
-	    {
-			NEG_WINDOW (w);
+	    /* Clear toggled window state if the Auto-Clear config option is set */
+	    NEGScreenClearToggled(s);
 
-			nw->matched = matchEval (negGetNegMatch (w->screen), w);
+	    ns->isNeg = negGetToggleScreenByDefault (s);
 
-			if (nw->matched)
-			{
-				if ((ns->isNeg || negGetToggleByDefault (s)) && !nw->isNeg)
-					NEGUpdateState (w);
-			}
-			else if (nw->isNeg)
-				NEGUpdateState (w);
-	    }
+	    NEGUpdateScreen (s);
+	}
+	break;
+    case NegScreenOptionExcludeMatch:
+	{
+	    NEGUpdateScreen (s);
+	}
+	break;
+    case NegScreenOptionPreserveToggled:
+	{
+	    NEGUpdateScreen (s);
 	}
 	break;
     default:
@@ -694,8 +843,9 @@ NEGInitDisplay (CompPlugin  *p,
 	return FALSE;
     }
 
-    negSetWindowToggleKeyInitiate (d, negToggle);
-    negSetScreenToggleKeyInitiate (d, negToggleAll);
+    negSetWindowToggleKeyInitiate  (d, negToggle);
+    negSetNewScreenToggleKeyInitiate  (d, negToggleAll);
+    negSetScreenToggleKeyInitiate (d, negToggleMatched);
 
     d->base.privates[displayPrivateIndex].ptr = nd;
 
@@ -735,13 +885,19 @@ NEGInitScreen (CompPlugin *p,
     /* initialize the screen variables
      * you know what happens if you don't
      */
-    ns->isNeg = FALSE;
+    ns->isNeg           = negGetToggleScreenByDefault (s);
+    ns->keyNegToggled   = FALSE;
+    ns->matchNeg        = negGetToggleByDefault (s);
+    ns->keyMatchToggled = FALSE;
 
     ns->negFunction      = 0;
     ns->negAlphaFunction = 0;
 
     negSetToggleByDefaultNotify (s, NEGScreenOptionChanged);
     negSetNegMatchNotify (s, NEGScreenOptionChanged);
+    negSetToggleScreenByDefaultNotify (s, NEGScreenOptionChanged);
+    negSetExcludeMatchNotify (s, NEGScreenOptionChanged);
+    negSetPreserveToggledNotify (s, NEGScreenOptionChanged);
 
     /* wrap overloaded functions */
     WRAP (ns, s, drawWindowTexture, NEGDrawWindowTexture);
@@ -781,8 +937,9 @@ NEGInitWindow (CompPlugin *p,
     if (!nw)
 	return FALSE;
 
-    nw->isNeg       = FALSE;
-    nw->matched     = FALSE;
+    nw->isNeg           = FALSE;
+    nw->keyNegToggled   = FALSE;
+    nw->keyNegPreserved = FALSE;
 
     w->base.privates[ns->windowPrivateIndex].ptr = nw;
 
@@ -858,4 +1015,3 @@ getCompPluginInfo(void)
 {
     return &NEGVTable;
 }
-
