diff --git a/metadata/neg.xml.in b/metadata/neg.xml.in
index eaed8e4..61c9809 100644
--- a/metadata/neg.xml.in
+++ b/metadata/neg.xml.in
@@ -22,15 +22,15 @@
 			</option>
 		</display>
 		<screen>
+			<option name="default_enabled" type="bool">
+				<_short>Enable by default</_short>
+				<_long>Enable Toggle Screen Negative by default</_long>
+				<default>false</default>
+			</option>
 			<option name="neg_match" type="match">
 				<_short>Negative Windows</_short>
-				<_long>Windows to be negative by default</_long>
-				<default>any</default>
-			</option>
-			<option name="exclude_match" type="match">
-				<_short>Exclude Windows</_short>
-				<_long>Windows to exclude from negating</_long>
-				<default>type=Desktop</default>
+				<_long>Windows to affect when negating</_long>
+				<default>!(type=Desktop)</default>
 			</option>
 		</screen>
 	</plugin>
diff --git a/src/neg/neg.c b/src/neg/neg.c
index 6b53b1a..0ba4ae7 100644
--- a/src/neg/neg.c
+++ b/src/neg/neg.c
@@ -40,13 +40,14 @@ typedef struct _NEGDisplay
 } NEGDisplay;
 
 
-typedef struct _NEGSCreen
+typedef struct _NEGScreen
 {
     int windowPrivateIndex;
 
     DrawWindowTextureProc drawWindowTexture;
 
     Bool isNeg; /* negative screen flag */
+    Bool isAutoNeg; /* To distinguish between manually toggled screen negative and default-enabled */
 
     int negFunction;
     int negAlphaFunction;
@@ -55,6 +56,7 @@ typedef struct _NEGSCreen
 typedef struct _NEGWindow
 {
     Bool isNeg; /* negative window flag */
+    Bool matched;
 } NEGWindow;
 
 #define GET_NEG_CORE(c) \
@@ -78,16 +80,15 @@ typedef struct _NEGWindow
 
 
 static void
-NEGToggle (CompWindow *w)
+NEGUpdateState (CompWindow *w)
 {
     NEG_WINDOW (w);
 
-    /* toggle window negative flag */
-    nw->isNeg = !nw->isNeg;
-
-    /* check exclude list */
-    if (matchEval (negGetExcludeMatch (w->screen), w))
-	nw->isNeg = FALSE;
+    /* check include list */
+    if (matchEval (negGetNegMatch (w->screen), w))
+		nw->isNeg = !nw->isNeg;
+	else
+		nw->isNeg = FALSE;
 
     /* cause repainting */
     addWindowDamage (w);
@@ -106,7 +107,7 @@ NEGToggleScreen (CompScreen *s)
     /* toggle every window */
     for (w = s->windows; w; w = w->next)
 	if (w)
-	    NEGToggle (w);
+	    NEGUpdateState (w);
 }
 
 static Bool
@@ -123,7 +124,7 @@ negToggle (CompDisplay     *d,
     w = findWindowAtDisplay (d, xid);
 
     if (w)
-	NEGToggle (w);
+	NEGUpdateState (w);
 
     return TRUE;
 }
@@ -549,10 +550,12 @@ static void
 NEGWindowAdd (CompScreen *s,
 	      CompWindow *w)
 {
-    /* nw->isNeg is initialized to FALSE in InitWindow, so we only
-       have to toggle it to TRUE if necessary */
-    if (matchEval (negGetNegMatch (s), w))
-	NEGToggle (w);
+	NEG_SCREEN (s);
+
+	/* nw->isNeg is initialized to FALSE in InitWindow, so we only
+	have to toggle it to TRUE if necessary */
+	if (ns->isNeg && matchEval (negGetNegMatch (s), w))
+		NEGUpdateState (w);
 }
 
 static void
@@ -562,24 +565,40 @@ NEGScreenOptionChanged (CompScreen       *s,
 {
     switch (num)
     {
+    case NegScreenOptionDefaultEnabled:
+    {
+		NEG_SCREEN (s);
+		if ( !ns->isNeg && negGetDefaultEnabled (s) )
+		{
+			NEGToggleScreen (s);
+			ns->isAutoNeg = true;
+		}
+		if ( ns->isNeg && !negGetDefaultEnabled (s) && ns->isAutoNeg )
+		{
+			NEGToggleScreen (s);
+			ns->isAutoNeg = false;
+		}
+    }
+    break;
     case NegScreenOptionNegMatch:
-    case NegScreenOptionExcludeMatch:
 	{
 	    CompWindow *w;
 	    NEG_SCREEN (s);
 
 	    for (w = s->windows; w; w = w->next)
 	    {
-		Bool isNeg;
-		NEG_WINDOW (w);
-
-		isNeg = matchEval (negGetNegMatch (s), w);
-		isNeg = isNeg && !matchEval (negGetExcludeMatch (s), w);
-
-		if (isNeg && ns->isNeg && !nw->isNeg)
-		    NEGToggle (w);
-		else if (!isNeg && nw->isNeg)
-		    NEGToggle (w);
+			NEG_WINDOW (w);
+
+			Bool matchChanged = nw->matched != matchEval (negGetNegMatch (w->screen), w);
+			nw->matched = matchEval (negGetNegMatch (w->screen), w);
+
+			if (matchChanged)
+			{
+				if (ns->isNeg)
+					NEGUpdateState (w);
+				else if (!matchEval (negGetNegMatch (w->screen), w) && nw->isNeg)
+					NEGUpdateState (w);
+			}
 	    }
 	}
 	break;
@@ -711,8 +730,8 @@ NEGInitScreen (CompPlugin *p,
     ns->negFunction      = 0;
     ns->negAlphaFunction = 0;
 
+    negSetDefaultEnabledNotify (s, NEGScreenOptionChanged);
     negSetNegMatchNotify (s, NEGScreenOptionChanged);
-    negSetExcludeMatchNotify (s, NEGScreenOptionChanged);
 
     /* wrap overloaded functions */
     WRAP (ns, s, drawWindowTexture, NEGDrawWindowTexture);
@@ -753,6 +772,7 @@ NEGInitWindow (CompPlugin *p,
 	return FALSE;
 
     nw->isNeg       = FALSE;
+    nw->matched     = matchEval (negGetNegMatch (w->screen), w);
 
     w->base.privates[ns->windowPrivateIndex].ptr = nw;
 
@@ -828,4 +848,3 @@ getCompPluginInfo(void)
 {
     return &NEGVTable;
 }
-
