diff --git a/src/neg/neg.c b/src/neg/neg.c
index e0f632a..02d9441 100644
--- a/src/neg/neg.c
+++ b/src/neg/neg.c
@@ -386,324 +386,33 @@ NEGDrawWindowTexture (CompWindow           *w,
 		      const FragmentAttrib *attrib,
 		      unsigned int         mask)
 {
-    int filter;
+	FragmentAttrib fa = *attrib;
+	int            function;
 
-    NEG_SCREEN (w->screen);
-    NEG_WINDOW (w);
+	NEG_SCREEN (w->screen);
+	NEG_WINDOW (w);
 
     /* only negate window contents; that's the only case
        where w->texture->name == texture->name */
-    if (nw->isNeg && (texture->name == w->texture->name))
-    {
-	if (w->screen->fragmentProgram)
+    if (!nw->isNeg || !((texture->name == w->texture->name) ||
+		(w->type & CompWindowTypeDesktopMask)) ||
+		!(w->screen->fragmentProgram))
 	{
-	    FragmentAttrib fa = *attrib;
-	    int            function;
+		/* not negative */
+		UNWRAP (ns, w->screen, drawWindowTexture);
+		(*w->screen->drawWindowTexture) (w, texture, attrib, mask);
+		WRAP (ns, w->screen, drawWindowTexture, NEGDrawWindowTexture);
 
-	    function = getNegFragmentFunction (w->screen, texture, w->alpha);
-	    if (function)
-		addFragmentFunction (&fa, function);
-
-	    UNWRAP (ns, w->screen, drawWindowTexture);
-	    (*w->screen->drawWindowTexture) (w, texture, &fa, mask);
-	    WRAP (ns, w->screen, drawWindowTexture, NEGDrawWindowTexture);
+		return;
 	}
-	else
-	{
-	    /* this is for the most part taken from paint.c */
-
-	    if (mask & PAINT_WINDOW_TRANSFORMED_MASK)
-		filter = w->screen->filter[WINDOW_TRANS_FILTER];
-	    else if (mask & PAINT_WINDOW_ON_TRANSFORMED_SCREEN_MASK)
-		filter = w->screen->filter[SCREEN_TRANS_FILTER];
-	    else
-		filter = w->screen->filter[NOTHING_TRANS_FILTER];
-
-	    /* if we can addjust saturation, even if it's just on and off */
-	    if (w->screen->canDoSaturated && attrib->saturation != COLOR)
-	    {
-		GLfloat constant[4];
-
-		/* if the paint mask has this set we want to blend */
-		if (mask & PAINT_WINDOW_TRANSLUCENT_MASK)
-		    glEnable (GL_BLEND);
 
-		/* enable the texture */
-		enableTexture (w->screen, texture, filter);
-
-		/* texture combiner */
-		glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
-		glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_INTERPOLATE);
-		glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_TEXTURE);
-		glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_RGB, GL_PRIMARY_COLOR);
-		glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE2_RGB, GL_PRIMARY_COLOR);
-
-		/* negate */
-		glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_RGB,
-			   GL_ONE_MINUS_SRC_COLOR);
-
-		glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_SRC_COLOR);
-		glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND2_RGB, GL_SRC_ALPHA);
-
-		glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_REPLACE);
-		glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_TEXTURE);
-		glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
-
-		glColor4f (1.0f, 1.0f, 1.0f, 0.5f);
-
-		/* make another texture active */
-		(*w->screen->activeTexture) (GL_TEXTURE1_ARB);
-
-		/* enable that texture */
-		enableTexture (w->screen, texture, filter);
-
-		glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
-		glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_DOT3_RGB);
-		glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_PREVIOUS);
-		glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_RGB, GL_CONSTANT);
-		glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_RGB, GL_SRC_COLOR);
-		glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_SRC_COLOR);
-
-		/* if we can do saturation that is in between min and max */
-		if (w->screen->canDoSlightlySaturated && attrib->saturation > 0)
-		{
-		    glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_REPLACE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_PREVIOUS);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
-
-		    constant[0] = 0.5f + 0.5f * RED_SATURATION_WEIGHT;
-		    constant[1] = 0.5f + 0.5f * GREEN_SATURATION_WEIGHT;
-		    constant[2] = 0.5f + 0.5f * BLUE_SATURATION_WEIGHT;
-		    constant[3] = 1.0;
-
-		    glTexEnvfv (GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, constant);
-
-		    /* mark another texture active */
-		    (*w->screen->activeTexture) (GL_TEXTURE2_ARB);
-
-		    /* enable that texture */
-		    enableTexture (w->screen, texture, filter);
-
-		    glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_INTERPOLATE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_TEXTURE0);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_RGB, GL_PREVIOUS);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE2_RGB, GL_CONSTANT);
-
-		    /* negate */
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_RGB,
-			       GL_ONE_MINUS_SRC_COLOR);
-
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_SRC_COLOR);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND2_RGB, GL_SRC_ALPHA);
-
-		    glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_REPLACE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_PREVIOUS);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
-
-		    /* color constant */
-		    constant[3] = attrib->saturation / 65535.0f;
-
-		    glTexEnvfv (GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, constant);
-
-		    /* if we are not opaque or not fully bright */
-		    if (attrib->opacity < OPAQUE ||
-			attrib->brightness != BRIGHT)
-		    {
-			/* activate a new texture */
-			(*w->screen->activeTexture) (GL_TEXTURE3_ARB);
-
-			/* enable that texture */
-			enableTexture (w->screen, texture, filter);
-
-			/* color constant */
-			constant[3] = attrib->opacity / 65535.0f;
-			constant[0] = constant[1] = constant[2] =
-			              constant[3] * attrib->brightness /
-				      65535.0f;
-
-			glTexEnvfv(GL_TEXTURE_ENV,
-				   GL_TEXTURE_ENV_COLOR, constant);
-
-			glTexEnvf(GL_TEXTURE_ENV,
-				  GL_TEXTURE_ENV_MODE, GL_COMBINE);
-
-			glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_MODULATE);
-			glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_PREVIOUS);
-			glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_RGB, GL_CONSTANT);
-			glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_RGB,
-				   GL_SRC_COLOR);
-			glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_RGB,
-				   GL_SRC_COLOR);
-
-			glTexEnvf (GL_TEXTURE_ENV,
-				   GL_COMBINE_ALPHA, GL_MODULATE);
-			glTexEnvf(GL_TEXTURE_ENV,
-				  GL_SOURCE0_ALPHA, GL_PREVIOUS);
-			glTexEnvf(GL_TEXTURE_ENV,
-				  GL_SOURCE1_ALPHA, GL_CONSTANT);
-			glTexEnvf(GL_TEXTURE_ENV,
-				  GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
-			glTexEnvf(GL_TEXTURE_ENV,
-				  GL_OPERAND1_ALPHA, GL_SRC_ALPHA);
-
-			/* draw the window geometry */
-			(*w->drawWindowGeometry) (w);
-
-			/* disable the current texture */
-			disableTexture (w->screen, texture);
-
-			/* set texture mode back to replace */
-			glTexEnvi (GL_TEXTURE_ENV,
-				   GL_TEXTURE_ENV_MODE, GL_REPLACE);
-
-			/* re-activate last texture */
-			(*w->screen->activeTexture) (GL_TEXTURE2_ARB);
-		    }
-		    else
-		    {
-			/* fully opaque and bright */
-
-			/* draw the window geometry */
-			(*w->drawWindowGeometry) (w);
-		    }
-
-		    /* disable the current texture */
-		    disableTexture (w->screen, texture);
-
-		    /* set the texture mode back to replace */
-		    glTexEnvi (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
-
-		    /* re-activate last texture */
-		    (*w->screen->activeTexture) (GL_TEXTURE1_ARB);
-		}
-		else
-		{
-		    /* fully saturated or fully unsaturated */
-
-		    glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_MODULATE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_PREVIOUS);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_ALPHA, GL_CONSTANT);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_ALPHA, GL_SRC_ALPHA);
-
-		    /* color constant */
-		    constant[3] = attrib->opacity / 65535.0f;
-		    constant[0] = constant[1] = constant[2] =
-				  constant[3] * attrib->brightness / 65535.0f;
-
-		    constant[0] =
-			0.5f + 0.5f * RED_SATURATION_WEIGHT * constant[0];
-		    constant[1] =
-			0.5f + 0.5f * GREEN_SATURATION_WEIGHT * constant[1];
-		    constant[2] =
-			0.5f + 0.5f * BLUE_SATURATION_WEIGHT * constant[2];
-
-		    glTexEnvfv (GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, constant);
-
-		    /* draw the window geometry */
-		    (*w->drawWindowGeometry) (w);
-		}
-
-		/* disable the current texture */
-		disableTexture (w->screen, texture);
-
-		/* set the texture mode back to replace */
-		glTexEnvi (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
-
-		/* re-activate last texture */
-		(*w->screen->activeTexture) (GL_TEXTURE0_ARB);
-
-		/* disable that texture */
-		disableTexture (w->screen, texture);
-
-		/* set the default color */
-		glColor4usv (defaultColor);
-
-		/* set screens texture mode back to replace */
-		screenTexEnvMode (w->screen, GL_REPLACE);
-
-		/* if it's a translucent window, disable blending */
-		if (mask & PAINT_WINDOW_TRANSLUCENT_MASK)
-		    glDisable (GL_BLEND);
-	    }
-	    else
-	    {
-		/* no saturation adjustments */
-
-		/* enable the current texture */
-		enableTexture (w->screen, texture, filter);
-
-		glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
-		glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_REPLACE);
-		glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_TEXTURE);
-
-		/* negate */
-		glTexEnvf(GL_TEXTURE_ENV, GL_OPERAND0_RGB,
-			  GL_ONE_MINUS_SRC_COLOR);
-
-		/* we are not opaque or fully bright */
-		if ((mask & PAINT_WINDOW_TRANSLUCENT_MASK) ||
-		    attrib->brightness != BRIGHT)
-		{
-		    GLfloat constant[4];
-
-		    /* enable blending */
-		    glEnable (GL_BLEND);
-
-		    /* color constant */
-		    constant[3] = attrib->opacity / 65535.0f;
-		    constant[0] = constant[3] * attrib->brightness / 65535.0f;
-		    constant[1] = constant[3] * attrib->brightness / 65535.0f;
-		    constant[2] = constant[3] * attrib->brightness / 65535.0f;
-
-		    glTexEnvfv (GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, constant);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_MODULATE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_RGB, GL_TEXTURE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_RGB, GL_CONSTANT);
-
-		    /* negate */
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_RGB,
-			       GL_ONE_MINUS_SRC_COLOR);
-
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_SRC_COLOR);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_MODULATE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE0_ALPHA, GL_TEXTURE);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_SOURCE1_ALPHA, GL_CONSTANT);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);
-		    glTexEnvf (GL_TEXTURE_ENV, GL_OPERAND1_ALPHA, GL_SRC_ALPHA);
-
-		    /* draw the window geometry */
-		    (*w->drawWindowGeometry) (w);
-
-		    /* disable blending */
-		    glDisable (GL_BLEND);
-		}
-		else
-		{
-		    /* no adjustments to saturation, brightness or opacity */
-
-		    /* draw the window geometry */
-		    (*w->drawWindowGeometry) (w);
-		}
-
-		/* disable the current texture */
-		disableTexture (w->screen, texture);
-
-		/* set the screens texture mode back to replace */
-		screenTexEnvMode (w->screen, GL_REPLACE);
-	    }
-	}
-    }
-    else
-    {
-	/* not negative */
+	function = getNegFragmentFunction (w->screen, texture, w->alpha);
+	if (function)
+		addFragmentFunction (&fa, function);
+
 	UNWRAP (ns, w->screen, drawWindowTexture);
-	(*w->screen->drawWindowTexture) (w, texture, attrib, mask);
+	(*w->screen->drawWindowTexture) (w, texture, &fa, mask);
 	WRAP (ns, w->screen, drawWindowTexture, NEGDrawWindowTexture);
-    }
 }
 
 static void
