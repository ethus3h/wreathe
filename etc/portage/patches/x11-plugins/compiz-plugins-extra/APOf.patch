diff --git a/metadata/wallpaper.xml.in b/metadata/wallpaper.xml.in
index 2a227c6..fca2204 100644
--- a/metadata/wallpaper.xml.in
+++ b/metadata/wallpaper.xml.in
@@ -18,7 +18,7 @@
 					<_short>Image</_short>
 					<_long>Image file.</_long>
 					<type>string</type>
-					<hints>file;image;</hints>
+					<hints>path;image;</hints>
 				</option>
 				<option name="bg_image_pos" type="list">
 					<_short>Position</_short>
@@ -77,6 +77,11 @@
 					<type>color</type>
 				</option>
 			</subgroup>
+			<option name="recursive" type="bool">
+				<_short>Search directories recursively</_short>
+				<_long>Search directories recursively.</_long>
+				<default>true</default>
+			</option>
 		</screen>
 	</plugin>
 </compiz>
diff --git a/src/wallpaper/wallpaper.c b/src/wallpaper/wallpaper.c
index 3adc78b..1e887e1 100644
--- a/src/wallpaper/wallpaper.c
+++ b/src/wallpaper/wallpaper.c
@@ -23,6 +23,8 @@
 #include <stdarg.h>
 #include <string.h>
 #include <math.h>
+#include <dirent.h>
+#include <sys/stat.h>
 
 #include <X11/Xatom.h>
 #include <X11/extensions/Xrender.h>
@@ -82,6 +84,163 @@ typedef struct _WallpaperScreen
 typedef void (*MultiListStructProc) (void *object,
 				     void *closure);
 
+static void
+wallpaperAddToList(char *fullpath, CompListValue **options, CompListValue ***new_options, int j, int n, int nElements)
+{
+	int i;
+
+	CompListValue **opts = *new_options;
+
+	for (i = 0; i < 5; i++)
+	{
+		switch (options[i]->type)
+		{
+			case CompOptionTypeString:
+				opts[i]->value = realloc(opts[i]->value, sizeof (CompOption) * n);
+				opts[i]->type = CompOptionTypeString;
+				opts[i]->value[n-1].s = strdup(fullpath);
+				opts[i]->nValue = n;
+			break;
+			case CompOptionTypeInt:
+				opts[i]->value = realloc(opts[i]->value, sizeof (CompOption) * n);
+				opts[i]->type = CompOptionTypeInt;
+				opts[i]->value[n-1].i = options[i]->value[j].i;
+				opts[i]->nValue = n;
+			break;
+			case CompOptionTypeColor:
+				opts[i]->value = realloc(opts[i]->value, sizeof (CompOption) * n);
+				opts[i]->type = CompOptionTypeColor;
+				memcpy(&(opts[i]->value[n-1].c), &options[i]->value[j].c, sizeof (unsigned short) * 4);
+				opts[i]->nValue = n;
+			break;
+			default:
+			break;
+		}
+	}
+}
+
+static void
+wallpaperSearchDirectory(CompScreen *s, char *path,
+						CompListValue **options, CompListValue ***new_options,
+						int j, int *n, int nElements, Bool recursive)
+{
+    DIR *dir;
+    struct dirent *file;
+	struct stat st, next;
+	char fullpath[256];
+    CompTexture tmpTex;
+	unsigned int w, h;
+
+	if (stat (path, &st) != 0)
+		return;
+
+	if (!S_ISDIR(st.st_mode))
+		return;
+
+	if ((dir = opendir(path)) == NULL)
+		return;
+
+	printf("Directory found: %s\n", path);
+
+	while ((file = readdir(dir)) != 0)
+	{
+		if (!strcmp(file->d_name, ".") || !strcmp(file->d_name, ".."))
+			continue;
+		strcpy (fullpath, path);
+		strcat (fullpath, "/");
+		strcat (fullpath, file->d_name);
+
+		if (recursive && stat (fullpath, &next) == 0 && S_ISDIR(next.st_mode))
+			wallpaperSearchDirectory(s, fullpath, options, new_options, j, n, nElements, TRUE);
+
+		initTexture (s, &tmpTex);
+
+		if (path && strlen (fullpath) && readImageToTexture (s, &tmpTex, fullpath, &w, &h))
+		{
+			compLogMessage ("wallpaper", CompLogLevelInfo,
+					"Loading: %s", fullpath);
+			/* Add to list */
+			wallpaperAddToList(fullpath, options, new_options, j, ++(*n), nElements);
+		}
+
+		finiTexture (s, &tmpTex);
+	}
+}
+
+static void
+wallpaperAddFilesFromDirectories(CompScreen *s, CompListValue ***new_options, CompListValue **options, unsigned int *nElements)
+{
+    CompTexture    tmpTex;
+	struct stat st;
+	int i, j, n;
+	unsigned int w, h;
+
+	*new_options = malloc(sizeof (CompListValue *) * 5);
+	if (!*new_options)
+		return;
+
+	for (i = 0; i < 5; i++)
+		(*new_options)[i] = calloc(0, sizeof (CompListValue));
+
+	for (i = 0, n = 0; i < *nElements; i++)
+	{
+		if (options[i]->type == CompOptionTypeString)
+		{
+			for (j = 0; j < options[i]->nValue; j++)
+			{
+				if (stat (options[i]->value[j].s, &st) == 0)
+				{
+					if (S_ISDIR(st.st_mode))
+						wallpaperSearchDirectory(s, options[i]->value[j].s, options, new_options, j, &n, *nElements, wallpaperGetRecursive(s));
+					else
+					{
+						initTexture (s, &tmpTex);
+
+						if (options[i]->value[j].s && strlen (options[i]->value[j].s) &&
+								readImageToTexture (s, &tmpTex, options[i]->value[j].s, &w, &h))
+						{
+							compLogMessage ("wallpaper", CompLogLevelInfo,
+									"Loading: %s", options[i]->value[j].s);
+							/* Add to list */
+							wallpaperAddToList(options[i]->value[j].s, options, new_options, j, ++n, *nElements);
+						}
+
+						finiTexture (s, &tmpTex);
+					}
+				}
+			}
+		}
+	}
+
+	*nElements = n;
+}
+
+static void
+wallpaperFreeOptions(CompListValue  **options, int n)
+{
+	int i, j;
+
+	for (i = 0; i < 5; i++)
+	{
+		switch(options[i]->type)
+		{
+			case CompOptionTypeString:
+				for (j = 0; j < n; j++)
+					free (options[i]->value[j].s);
+				free (options[i]->value);
+				free (options[i]);
+			break;
+			case CompOptionTypeInt:
+			case CompOptionTypeColor:
+				free (options[i]->value);
+				free (options[i]);
+			break;
+			default:
+			break;
+		}
+	}
+}
+
 static void *
 processMultiList (unsigned int        structSize,
 		  void                *currData,
@@ -93,7 +252,7 @@ processMultiList (unsigned int        structSize,
 		  ...)
 {
     CompOption     *option;
-    CompListValue  **options;
+    CompListValue  **options, **new_options;
     unsigned int   *offsets;
     unsigned int   i, j, nElements = 0;
     unsigned int   oldSize;
@@ -135,7 +294,7 @@ processMultiList (unsigned int        structSize,
     {
 	option = va_arg (ap, CompOption *);
 	offsets[i] = va_arg (ap, unsigned int);
-	
+
 	if (option->type != CompOptionTypeList)
 	{
 	    free (options);
@@ -150,13 +309,28 @@ processMultiList (unsigned int        structSize,
     }
     va_end (ap);
 
+	if (options[4]->nValue != nElements || options[0]->nValue != options[1]->nValue ||
+											options[1]->nValue != options[2]->nValue ||
+											options[2]->nValue != options[3]->nValue ||
+											options[3]->nValue != options[4]->nValue)
+	{
+		free (options);
+		free (offsets);
+		free (newVal);
+		return currData;
+	}
+
+    wallpaperAddFilesFromDirectories(closure, &new_options, options, &nElements);
+
+	free (options);
+
     for (j = nElements; j < oldSize; j++)
     {
 	(*fini) (((char *)currData) + (j * structSize), closure);
 	for (i = 0; i < numOptions; i++)
 	{
 	    value = ((char *)currData) + (j * structSize) + offsets[i];
-	    switch (options[i]->type)
+	    switch (new_options[i]->type)
 	    {
 	    case CompOptionTypeString:
 		stringValue = (char **) value;
@@ -175,7 +349,7 @@ processMultiList (unsigned int        structSize,
 
     if (!nElements)
     {
-	free (options);
+	wallpaperFreeOptions(new_options, nElements);
 	free (offsets);
 	free (newVal);
 	free (currData);
@@ -190,7 +364,7 @@ processMultiList (unsigned int        structSize,
 
     if (!rv)
     {
-	free (options);
+	wallpaperFreeOptions(new_options, nElements);
 	free (offsets);
 	free (newVal);
 	return currData;
@@ -211,14 +385,14 @@ processMultiList (unsigned int        structSize,
 	    value = rv + (j * structSize) + offsets[i];
 	    setVal = newVal + offsets[i];
 
-	    if (j < options[i]->nValue)
-		optVal = &options[i]->value[j];
+	    if (j < new_options[i]->nValue)
+		optVal = &new_options[i]->value[j];
 	    else
 		optVal = &zeroVal;
 
-	    if (j < options[i]->nValue)
+	    if (j < new_options[i]->nValue)
 	    {
-		switch (options[i]->type)
+		switch (new_options[i]->type)
 		{
 		case CompOptionTypeBool:
 		    memcpy (setVal, &optVal->b, sizeof (Bool));
@@ -271,7 +445,7 @@ processMultiList (unsigned int        structSize,
 	for (i = 0; i < numOptions; i++)
 	{
 	    value = setVal + offsets[i];
-	    switch (options[i]->type)
+	    switch (new_options[i]->type)
 	    {
 	    case CompOptionTypeString:
 		stringValue = (char **) value;
@@ -295,7 +469,7 @@ processMultiList (unsigned int        structSize,
 	
     }
 
-    free (options);
+	wallpaperFreeOptions (new_options, nElements);
     free (offsets);
     free (newVal);
     *numReturn = nElements;
@@ -886,6 +1060,7 @@ static Bool wallpaperInitScreen (CompPlugin *p,
     wallpaperSetBgFillTypeNotify (s, wallpaperBackgroundsChanged);
     wallpaperSetBgColor1Notify (s, wallpaperBackgroundsChanged);
     wallpaperSetBgColor2Notify (s, wallpaperBackgroundsChanged);
+    wallpaperSetRecursiveNotify (s, wallpaperBackgroundsChanged);
 
     s->base.privates[wd->screenPrivateIndex].ptr = ws;
 

